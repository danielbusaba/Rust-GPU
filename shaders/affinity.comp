#version 310 es

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, rgba8ui) restrict readonly uniform lowp uimage2D original;
layout(binding = 1, rgba8ui) restrict writeonly uniform lowp uimage2D modified;

#define PIXELS 256

void main()
{
    // Retrieve current index and image size
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(original);

    // Create and clear lists for storing single/joint occurrences
    uvec3 single_frequencies [PIXELS];
    uvec3 joint_frequencies [PIXELS * PIXELS];
    for (int i = 0; i < PIXELS; i++)
    {
        single_frequencies [i] = uvec3(0);
        for (int j = 0; j < PIXELS; j++)
        {
            joint_frequencies [i * PIXELS + j] = uvec3(0);
        }
    }

    // Get bounds of 3x3 square
    int rl = index.x;
    if (index.x > 0) { rl = index.x - 1; }
    int rr = index.x;
    if (index.x < size.x - 1) { rr = index.x + 1; }
    int cl = index.y;
    if (index.y > 0) { cl = index.y - 1; }
    int cr = index.y;
    if (index.y < size.y - 1) { cr = index.y + 1; }

    // Loop over sub-image
    for (int i = rl; i < rr; i++)
    {
        for (int j = cl; j < cr; j++)
        {
            uvec3 singles [PIXELS];
            uvec3 doubles [PIXELS * PIXELS];
            for (int k = 0; k < PIXELS; k++)
            {
                singles [k] = uvec3(0);
                for (int l = 0; l < PIXELS; l++)
                {
                    doubles [k * PIXELS + l] = uvec3(0);
                }
            }

            // Loop over windows
            for (int r = i; r <= i + 1; r++)
            {
                for (int c = j; c <= j + 1; c++)
                {
                    uvec3 current = imageLoad(original, ivec2(r, c)).rgb;
                    if (singles [current.r].r == uint(0))
                    {
                        for (int f = 0; f < PIXELS; f++)
                        {
                            if (singles [f].r == uint(1))
                            {
                                doubles [current.r] [f] = uint(1);
                                doubles [f] [current.r] = uint(1);
                            }
                        }
                        singles [current.r].r = uint(1);
                    }
                    if (singles [current.g].g == uint(0))
                    {
                        for (int f = 0; f < PIXELS; f++)
                        {
                            if (singles [f].g == uint(1))
                            {
                                doubles [current.g] [f] = uint(1);
                                doubles [f] [current.g] = uint(1);
                            }
                        }
                        singles [current.g].g = uint(1);
                    }
                    if (singles [current.b].b == uint(0))
                    {
                        for (int f = 0; f < PIXELS; f++)
                        {
                            if (singles [f].b == uint(1))
                            {
                                doubles [current.b] [f] = uint(1);
                                doubles [f] [current.b] = uint(1);
                            }
                        }
                        singles [current.b].b = uint(1);
                    }
                }
            }

            for (int k = 0; k < PIXELS; k++)
            {
                if (singles [k].r == uint(1)) { single_frequencies [k].r++; }
                if (singles [k].g == uint(1)) { single_frequencies [k].g++; }
                if (singles [k].b == uint(1)) { single_frequencies [k].b++; }
                for (int l = 0; l < PIXELS; l++)
                {
                    if (doubles [k * PIXELS + l].r == uint(1)) { joint_frequencies [k * PIXELS + l].r++; }
                    if (doubles [k * PIXELS + l].g == uint(1)) { joint_frequencies [k * PIXELS + l].g++; }
                    if (doubles [k * PIXELS + l].b == uint(1)) { joint_frequencies [k * PIXELS + l].b++; }
                }
            }
        }
    }

    uvec3 high = uvec3(0);
    uvec3 mx = uvec3(0);
    uvec3 mn = uvec3(0);
    for (int i = 0; i < PIXELS; i++)
    {
        for (int j = i; j < PIXELS; j++)
        {
            uint r = uint(i);
            uint c = uint(j);
            uvec3 current = joint_frequencies [i * PIXELS + j];
            if (current.r > high.r)
            {
                mx.r = c;
                mn.r = r;
                high.r = current.r;
            }
            if (current.g > high.g)
            {
                mx.g = c;
                mn.g = r;
                high.g = current.g;
            }
            if (current.b > high.b)
            {
                mx.b = c;
                mn.b = r;
                high.b = current.b;
            }
        }
    }
    
    uvec4 write = uvec4(mx - mn, imageLoad(original, index).a);
    imageStore(modified, index, write);
}
